% Copyright (c) 2023 NEC Corporation
% Nakano's 4-point method for F+f estimation with single known epipole
%
% USAGE:
%   [F, f, E] = Ff4pt_e1_Nakano(e1, m1, m2, c1, c2)
% INPUTS:
%   e1    - 3x1, epipole in homogeneous coordinates
%   m1,m2 - 3x4, 2D point correspondences in homogeneous coordinates 
%   c1,c2 - 1x2, image center of each camera (default: [0,0])
% OUTPUTS:
%   F - 3x3xM, fundamental matrix
%   f - 1xM, focal length
%   E - 3x3xM, essential matrix
%   (0 <= M <= 5)
% REFERENCE:
%   G. Nakano, Minimal Solutions to Uncalibrated Two-view Geometry with Known Epipoles, ICCV2023 
function [F, f, E] = Ff4pt_e1_Nakano(e1, m1, m2, c1, c2)
arguments 
    e1 (3,1) double
    m1 (3,4) double
    m2 (3,4) double
    c1 (1,2) double = [0,0]
    c2 (1,2) double = [0,0]
end

e1 = e1 / e1(3);
m1 = m1 ./ m1(3,:);
m2 = m2 ./ m2(3,:);

s  = max(abs([m1(:);m2(:);e1]));

T1 = [1/s 0 -c1(1)/s
      0 1/s -c1(2)/s
      0   0      1];
T2 = [1/s 0 -c2(1)/s
      0 1/s -c2(2)/s
      0   0    1];
m1 = T1*m1;
m2 = T2*m2;
e1 = T1*e1;

  
O13 = zeros(1,3);
M = [e1', O13, O13
     O13, e1', O13
     O13, O13, e1'
     m2(1,:)'.*m1', m2(2,:)'.*m1', m2(3,:)'.*m1'];
[~,~,V] = svd(M);
V = V(:,end-1:end);

V11 = V(1,1); V12 = V(1,2);
V21 = V(2,1); V22 = V(2,2);
V31 = V(3,1); V32 = V(3,2);
V41 = V(4,1); V42 = V(4,2);
V51 = V(5,1); V52 = V(5,2);
V61 = V(6,1); V62 = V(6,2);
V71 = V(7,1); V72 = V(7,2);
V81 = V(8,1); V82 = V(8,2);
V91 = V(9,1); V92 = V(9,2);

c = [V92*V12^2*V32^2 - V92*V12^2*V72^2 - 2*V92*V12*V22*V72*V82 - V12*V32^3*V72 + 2*V92*V12*V32*V42*V62 - V12*V32*V62^2*V72 + V12*V32*V72^3 + V12*V32*V72*V82^2 + V92*V22^2*V32^2 - V92*V22^2*V82^2 - V22*V32^3*V82 + 2*V92*V22*V32*V52*V62 - V22*V32*V62^2*V82 + V22*V32*V72^2*V82 + V22*V32*V82^3 - V32^2*V42*V62*V72 - V32^2*V52*V62*V82 + V92*V42^2*V62^2 - V92*V42^2*V72^2 - 2*V92*V42*V52*V72*V82 - V42*V62^3*V72 + V42*V62*V72^3 + V42*V62*V72*V82^2 + V92*V52^2*V62^2 - V92*V52^2*V82^2 - V52*V62^3*V82 + V52*V62*V72^2*V82 + V52*V62*V82^3
     V82^2*(V72*(V11*V32 + V12*V31) + V12*V32*V71) + V82^2*(V72*(V41*V62 + V42*V61) + V42*V62*V71) - V72*(V11*V32^3 + 3*V12*V31*V32^2) - V82*(V21*V32^3 + 3*V22*V31*V32^2) - V72*(V41*V62^3 + 3*V42*V61*V62^2) - V82*(V51*V62^3 + 3*V52*V61*V62^2) - V72*((V11*V32 + V12*V31)*V62^2 + 2*V12*V32*V61*V62) - V82*((V21*V32 + V22*V31)*V62^2 + 2*V22*V32*V61*V62) + V82*((V21*V32 + V22*V31)*V72^2 + 2*V22*V32*V71*V72) + V82*((V51*V62 + V52*V61)*V72^2 + 2*V52*V62*V71*V72) + V92*(V62*(V42*(2*V11*V32 + 2*V12*V31) + 2*V12*V32*V41) + 2*V12*V32*V42*V61) + V92*(V62*(V52*(2*V21*V32 + 2*V22*V31) + 2*V22*V32*V51) + 2*V22*V32*V52*V61) - V92*(V82*(V72*(2*V11*V22 + 2*V12*V21) + 2*V12*V22*V71) + 2*V12*V22*V72*V81) - V92*(V82*(V72*(2*V41*V52 + 2*V42*V51) + 2*V42*V52*V71) + 2*V42*V52*V72*V81) + V72^3*(V11*V32 + V12*V31) + V82^3*(V21*V32 + V22*V31) + V72^3*(V41*V62 + V42*V61) + V82^3*(V51*V62 + V52*V61) + V92*(2*V31*V12^2*V32 + 2*V11*V12*V32^2) + V92*(2*V31*V22^2*V32 + 2*V21*V22*V32^2) - V92*(2*V71*V12^2*V72 + 2*V11*V12*V72^2) - V92*(2*V81*V22^2*V82 + 2*V21*V22*V82^2) + V92*(2*V61*V42^2*V62 + 2*V41*V42*V62^2) - V92*(2*V71*V42^2*V72 + 2*V41*V42*V72^2) + V92*(2*V61*V52^2*V62 + 2*V51*V52*V62^2) - V92*(2*V81*V52^2*V82 + 2*V51*V52*V82^2) - V72*(V62*(V41*V32^2 + 2*V31*V42*V32) + V32^2*V42*V61) - V82*(V62*(V51*V32^2 + 2*V31*V52*V32) + V32^2*V52*V61) + V12^2*V32^2*V91 + V22^2*V32^2*V91 - V12^2*V72^2*V91 - V22^2*V82^2*V91 + V42^2*V62^2*V91 - V42^2*V72^2*V91 + V52^2*V62^2*V91 - V52^2*V82^2*V91 - V12*V32^3*V71 - V22*V32^3*V81 - V42*V62^3*V71 - V52*V62^3*V81 - V12*V32*V62^2*V71 + 3*V12*V32*V71*V72^2 - V22*V32*V62^2*V81 + V22*V32*V72^2*V81 - V32^2*V42*V62*V71 + 3*V22*V32*V81*V82^2 - V32^2*V52*V62*V81 + 3*V42*V62*V71*V72^2 + V52*V62*V72^2*V81 + 3*V52*V62*V81*V82^2 + 2*V12*V32*V42*V62*V91 + 2*V22*V32*V52*V62*V91 - 2*V12*V22*V72*V82*V91 + 2*V12*V32*V72*V81*V82 - 2*V42*V52*V72*V82*V91 + 2*V42*V62*V72*V81*V82
     V82^2*(V71*(V11*V32 + V12*V31) + V11*V31*V72) + V82^2*(V71*(V41*V62 + V42*V61) + V41*V61*V72) - V72*(2*V61*V62*(V11*V32 + V12*V31) + V11*V31*V62^2 + V12*V32*V61^2) - V82*(2*V61*V62*(V21*V32 + V22*V31) + V21*V31*V62^2 + V22*V32*V61^2) + V82*(2*V71*V72*(V21*V32 + V22*V31) + V21*V31*V72^2 + V22*V32*V71^2) + V82*(2*V71*V72*(V51*V62 + V52*V61) + V51*V61*V72^2 + V52*V62*V71^2) - V71*(V11*V32^3 + 3*V12*V31*V32^2) - V81*(V21*V32^3 + 3*V22*V31*V32^2) - V71*(V41*V62^3 + 3*V42*V61*V62^2) - V81*(V51*V62^3 + 3*V52*V61*V62^2) - V71*((V11*V32 + V12*V31)*V62^2 + 2*V12*V32*V61*V62) - V81*((V21*V32 + V22*V31)*V62^2 + 2*V22*V32*V61*V62) + V81*((V21*V32 + V22*V31)*V72^2 + 2*V22*V32*V71*V72) + V81*((V51*V62 + V52*V61)*V72^2 + 2*V52*V62*V71*V72) + V92*(V62*(V41*(2*V11*V32 + 2*V12*V31) + 2*V11*V31*V42) + V61*(V42*(2*V11*V32 + 2*V12*V31) + 2*V12*V32*V41)) + V92*(V62*(V51*(2*V21*V32 + 2*V22*V31) + 2*V21*V31*V52) + V61*(V52*(2*V21*V32 + 2*V22*V31) + 2*V22*V32*V51)) - V92*(V82*(V71*(2*V11*V22 + 2*V12*V21) + 2*V11*V21*V72) + V81*(V72*(2*V11*V22 + 2*V12*V21) + 2*V12*V22*V71)) - V92*(V82*(V71*(2*V41*V52 + 2*V42*V51) + 2*V41*V51*V72) + V81*(V72*(2*V41*V52 + 2*V42*V51) + 2*V42*V52*V71)) + V92*(V11^2*V32^2 + 4*V11*V12*V31*V32 + V12^2*V31^2) + V92*(V21^2*V32^2 + 4*V21*V22*V31*V32 + V22^2*V31^2) - V92*(V11^2*V72^2 + 4*V11*V12*V71*V72 + V12^2*V71^2) - V92*(V21^2*V82^2 + 4*V21*V22*V81*V82 + V22^2*V81^2) + V92*(V41^2*V62^2 + 4*V41*V42*V61*V62 + V42^2*V61^2) - V92*(V41^2*V72^2 + 4*V41*V42*V71*V72 + V42^2*V71^2) + V92*(V51^2*V62^2 + 4*V51*V52*V61*V62 + V52^2*V61^2) - V92*(V51^2*V82^2 + 4*V51*V52*V81*V82 + V52^2*V81^2) + V91*(V62*(V42*(2*V11*V32 + 2*V12*V31) + 2*V12*V32*V41) + 2*V12*V32*V42*V61) + V91*(V62*(V52*(2*V21*V32 + 2*V22*V31) + 2*V22*V32*V51) + 2*V22*V32*V52*V61) - V91*(V82*(V72*(2*V11*V22 + 2*V12*V21) + 2*V12*V22*V71) + 2*V12*V22*V72*V81) - V91*(V82*(V72*(2*V41*V52 + 2*V42*V51) + 2*V42*V52*V71) + 2*V42*V52*V72*V81) + V91*(2*V31*V12^2*V32 + 2*V11*V12*V32^2) - V72*(3*V12*V31^2*V32 + 3*V11*V31*V32^2) + V91*(2*V31*V22^2*V32 + 2*V21*V22*V32^2) - V82*(3*V22*V31^2*V32 + 3*V21*V31*V32^2) - V91*(2*V71*V12^2*V72 + 2*V11*V12*V72^2) - V91*(2*V81*V22^2*V82 + 2*V21*V22*V82^2) + V91*(2*V61*V42^2*V62 + 2*V41*V42*V62^2) - V72*(3*V42*V61^2*V62 + 3*V41*V61*V62^2) - V91*(2*V71*V42^2*V72 + 2*V41*V42*V72^2) + V91*(2*V61*V52^2*V62 + 2*V51*V52*V62^2) - V82*(3*V52*V61^2*V62 + 3*V51*V61*V62^2) - V91*(2*V81*V52^2*V82 + 2*V51*V52*V82^2) - V71*(V62*(V41*V32^2 + 2*V31*V42*V32) + V32^2*V42*V61) - V81*(V62*(V51*V32^2 + 2*V31*V52*V32) + V32^2*V52*V61) - V72*(V61*(V41*V32^2 + 2*V31*V42*V32) + V62*(V42*V31^2 + 2*V32*V41*V31)) - V82*(V61*(V51*V32^2 + 2*V31*V52*V32) + V62*(V52*V31^2 + 2*V32*V51*V31)) + V11*V31*V72^3 + V21*V31*V82^3 + V41*V61*V72^3 + V51*V61*V82^3 + 3*V71*V72^2*(V11*V32 + V12*V31) + 3*V81*V82^2*(V21*V32 + V22*V31) + 3*V71*V72^2*(V41*V62 + V42*V61) + 3*V81*V82^2*(V51*V62 + V52*V61) + 2*V81*V82*(V72*(V11*V32 + V12*V31) + V12*V32*V71) + 2*V81*V82*(V72*(V41*V62 + V42*V61) + V42*V62*V71) + 3*V12*V32*V71^2*V72 + V12*V32*V72*V81^2 + 3*V22*V32*V81^2*V82 + 3*V42*V62*V71^2*V72 + V42*V62*V72*V81^2 + 3*V52*V62*V81^2*V82
     V81^2*(V72*(V11*V32 + V12*V31) + V12*V32*V71) + V81^2*(V72*(V41*V62 + V42*V61) + V42*V62*V71) - V71*(2*V61*V62*(V11*V32 + V12*V31) + V11*V31*V62^2 + V12*V32*V61^2) - V81*(2*V61*V62*(V21*V32 + V22*V31) + V21*V31*V62^2 + V22*V32*V61^2) + V81*(2*V71*V72*(V21*V32 + V22*V31) + V21*V31*V72^2 + V22*V32*V71^2) + V81*(2*V71*V72*(V51*V62 + V52*V61) + V51*V61*V72^2 + V52*V62*V71^2) - V72*(V12*V31^3 + 3*V11*V32*V31^2) - V82*(V22*V31^3 + 3*V21*V32*V31^2) - V72*(V42*V61^3 + 3*V41*V62*V61^2) - V82*(V52*V61^3 + 3*V51*V62*V61^2) - V72*((V11*V32 + V12*V31)*V61^2 + 2*V11*V31*V62*V61) - V82*((V21*V32 + V22*V31)*V61^2 + 2*V21*V31*V62*V61) + V82*((V21*V32 + V22*V31)*V71^2 + 2*V21*V31*V72*V71) + V82*((V51*V62 + V52*V61)*V71^2 + 2*V51*V61*V72*V71) + V91*(V62*(V41*(2*V11*V32 + 2*V12*V31) + 2*V11*V31*V42) + V61*(V42*(2*V11*V32 + 2*V12*V31) + 2*V12*V32*V41)) + V91*(V62*(V51*(2*V21*V32 + 2*V22*V31) + 2*V21*V31*V52) + V61*(V52*(2*V21*V32 + 2*V22*V31) + 2*V22*V32*V51)) - V91*(V82*(V71*(2*V11*V22 + 2*V12*V21) + 2*V11*V21*V72) + V81*(V72*(2*V11*V22 + 2*V12*V21) + 2*V12*V22*V71)) - V91*(V82*(V71*(2*V41*V52 + 2*V42*V51) + 2*V41*V51*V72) + V81*(V72*(2*V41*V52 + 2*V42*V51) + 2*V42*V52*V71)) + V91*(V11^2*V32^2 + 4*V11*V12*V31*V32 + V12^2*V31^2) + V91*(V21^2*V32^2 + 4*V21*V22*V31*V32 + V22^2*V31^2) - V91*(V11^2*V72^2 + 4*V11*V12*V71*V72 + V12^2*V71^2) - V91*(V21^2*V82^2 + 4*V21*V22*V81*V82 + V22^2*V81^2) + V91*(V41^2*V62^2 + 4*V41*V42*V61*V62 + V42^2*V61^2) - V91*(V41^2*V72^2 + 4*V41*V42*V71*V72 + V42^2*V71^2) + V91*(V51^2*V62^2 + 4*V51*V52*V61*V62 + V52^2*V61^2) - V91*(V51^2*V82^2 + 4*V51*V52*V81*V82 + V52^2*V81^2) + V92*(V61*(V41*(2*V11*V32 + 2*V12*V31) + 2*V11*V31*V42) + 2*V11*V31*V41*V62) + V92*(V61*(V51*(2*V21*V32 + 2*V22*V31) + 2*V21*V31*V52) + 2*V21*V31*V51*V62) - V92*(V81*(V71*(2*V11*V22 + 2*V12*V21) + 2*V11*V21*V72) + 2*V11*V21*V71*V82) - V92*(V81*(V71*(2*V41*V52 + 2*V42*V51) + 2*V41*V51*V72) + 2*V41*V51*V71*V82) + V92*(2*V32*V11^2*V31 + 2*V12*V11*V31^2) - V71*(3*V12*V31^2*V32 + 3*V11*V31*V32^2) + V92*(2*V32*V21^2*V31 + 2*V22*V21*V31^2) - V81*(3*V22*V31^2*V32 + 3*V21*V31*V32^2) - V92*(2*V72*V11^2*V71 + 2*V12*V11*V71^2) - V92*(2*V82*V21^2*V81 + 2*V22*V21*V81^2) + V92*(2*V62*V41^2*V61 + 2*V42*V41*V61^2) - V71*(3*V42*V61^2*V62 + 3*V41*V61*V62^2) - V92*(2*V72*V41^2*V71 + 2*V42*V41*V71^2) + V92*(2*V62*V51^2*V61 + 2*V52*V51*V61^2) - V81*(3*V52*V61^2*V62 + 3*V51*V61*V62^2) - V92*(2*V82*V51^2*V81 + 2*V52*V51*V81^2) - V72*(V61*(V42*V31^2 + 2*V32*V41*V31) + V31^2*V41*V62) - V82*(V61*(V52*V31^2 + 2*V32*V51*V31) + V31^2*V51*V62) - V71*(V61*(V41*V32^2 + 2*V31*V42*V32) + V62*(V42*V31^2 + 2*V32*V41*V31)) - V81*(V61*(V51*V32^2 + 2*V31*V52*V32) + V62*(V52*V31^2 + 2*V32*V51*V31)) + V12*V32*V71^3 + V22*V32*V81^3 + V42*V62*V71^3 + V52*V62*V81^3 + 3*V71^2*V72*(V11*V32 + V12*V31) + 3*V81^2*V82*(V21*V32 + V22*V31) + 3*V71^2*V72*(V41*V62 + V42*V61) + 3*V81^2*V82*(V51*V62 + V52*V61) + 2*V81*V82*(V71*(V11*V32 + V12*V31) + V11*V31*V72) + 2*V81*V82*(V71*(V41*V62 + V42*V61) + V41*V61*V72) + 3*V11*V31*V71*V72^2 + V11*V31*V71*V82^2 + 3*V21*V31*V81*V82^2 + 3*V41*V61*V71*V72^2 + V41*V61*V71*V82^2 + 3*V51*V61*V81*V82^2
     V81^2*(V71*(V11*V32 + V12*V31) + V11*V31*V72) + V81^2*(V71*(V41*V62 + V42*V61) + V41*V61*V72) - V71*(V12*V31^3 + 3*V11*V32*V31^2) - V81*(V22*V31^3 + 3*V21*V32*V31^2) - V71*(V42*V61^3 + 3*V41*V62*V61^2) - V81*(V52*V61^3 + 3*V51*V62*V61^2) - V71*((V11*V32 + V12*V31)*V61^2 + 2*V11*V31*V62*V61) - V81*((V21*V32 + V22*V31)*V61^2 + 2*V21*V31*V62*V61) + V81*((V21*V32 + V22*V31)*V71^2 + 2*V21*V31*V72*V71) + V81*((V51*V62 + V52*V61)*V71^2 + 2*V51*V61*V72*V71) + V91*(V61*(V41*(2*V11*V32 + 2*V12*V31) + 2*V11*V31*V42) + 2*V11*V31*V41*V62) + V91*(V61*(V51*(2*V21*V32 + 2*V22*V31) + 2*V21*V31*V52) + 2*V21*V31*V51*V62) - V91*(V81*(V71*(2*V11*V22 + 2*V12*V21) + 2*V11*V21*V72) + 2*V11*V21*V71*V82) - V91*(V81*(V71*(2*V41*V52 + 2*V42*V51) + 2*V41*V51*V72) + 2*V41*V51*V71*V82) + V71^3*(V11*V32 + V12*V31) + V81^3*(V21*V32 + V22*V31) + V71^3*(V41*V62 + V42*V61) + V81^3*(V51*V62 + V52*V61) + V91*(2*V32*V11^2*V31 + 2*V12*V11*V31^2) + V91*(2*V32*V21^2*V31 + 2*V22*V21*V31^2) - V91*(2*V72*V11^2*V71 + 2*V12*V11*V71^2) - V91*(2*V82*V21^2*V81 + 2*V22*V21*V81^2) + V91*(2*V62*V41^2*V61 + 2*V42*V41*V61^2) - V91*(2*V72*V41^2*V71 + 2*V42*V41*V71^2) + V91*(2*V62*V51^2*V61 + 2*V52*V51*V61^2) - V91*(2*V82*V51^2*V81 + 2*V52*V51*V81^2) - V71*(V61*(V42*V31^2 + 2*V32*V41*V31) + V31^2*V41*V62) - V81*(V61*(V52*V31^2 + 2*V32*V51*V31) + V31^2*V51*V62) + V11^2*V31^2*V92 + V21^2*V31^2*V92 - V11^2*V71^2*V92 - V21^2*V81^2*V92 + V41^2*V61^2*V92 - V41^2*V71^2*V92 + V51^2*V61^2*V92 - V51^2*V81^2*V92 - V11*V31^3*V72 - V21*V31^3*V82 - V41*V61^3*V72 - V51*V61^3*V82 - V11*V31*V61^2*V72 + 3*V11*V31*V71^2*V72 - V21*V31*V61^2*V82 + V21*V31*V71^2*V82 - V31^2*V41*V61*V72 + 3*V21*V31*V81^2*V82 - V31^2*V51*V61*V82 + 3*V41*V61*V71^2*V72 + V51*V61*V71^2*V82 + 3*V51*V61*V81^2*V82 + 2*V11*V31*V41*V61*V92 + 2*V21*V31*V51*V61*V92 - 2*V11*V21*V71*V81*V92 + 2*V11*V31*V71*V81*V82 - 2*V41*V51*V71*V81*V92 + 2*V41*V61*V71*V81*V82
     V91*V11^2*V31^2 - V91*V11^2*V71^2 - 2*V91*V11*V21*V71*V81 - V11*V31^3*V71 + 2*V91*V11*V31*V41*V61 - V11*V31*V61^2*V71 + V11*V31*V71^3 + V11*V31*V71*V81^2 + V91*V21^2*V31^2 - V91*V21^2*V81^2 - V21*V31^3*V81 + 2*V91*V21*V31*V51*V61 - V21*V31*V61^2*V81 + V21*V31*V71^2*V81 + V21*V31*V81^3 - V31^2*V41*V61*V71 - V31^2*V51*V61*V81 + V91*V41^2*V61^2 - V91*V41^2*V71^2 - 2*V91*V41*V51*V71*V81 - V41*V61^3*V71 + V41*V61*V71^3 + V41*V61*V71*V81^2 + V91*V51^2*V61^2 - V91*V51^2*V81^2 - V51*V61^3*V81 + V51*V61*V71^2*V81 + V51*V61*V81^3];
sols = roots(c);
sols = sols(~imag(sols));

if isempty(sols)
    F = [];
    E = [];
    f = [];
else
    nsols = length(sols);
    F  = zeros(3,3,nsols);
    E  = zeros(3,3,nsols);
    f  = zeros(1,nsols);
    valid = true(1,nsols);
    V1 = reshape(V(:,1),3,3)';
    V2 = reshape(V(:,2),3,3)';

    for i=1:nsols
        
        F_tmp = V1 + sols(i)*V2;
        [f_tmp, ~] = fEf_from_F(F_tmp);
        if isempty(f_tmp)
            valid(i) = false;
        else
            f(i) = s * f_tmp;
            F_tmp= T2' * F_tmp * T1;
            F(:,:,i) = F_tmp / norm(F_tmp,'fro');
                   
            K1 = [f(i)  0 c1(1)
                  0  f(i) c1(2)
                  0     0   1];
            K2 = [f(i)  0 c2(1)
                  0  f(i) c2(2)
                  0     0   1];
            
            E_tmp = K2' * F(:,:,i) * K1;
            E(:,:,i) = E_tmp / norm(E_tmp,'fro');
        end
        
    end
    F = F(:,:,valid);
    E = E(:,:,valid);
    f = f(valid);
end

end
